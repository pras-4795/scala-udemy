
def greetingFun(name: String, age: Int): String = {
  s"Hi, my name is $name and I am $age years old."
}

println(greetingFun("tiger", 10))

def factorial(num: Int): Int = {
  if(num == 1 ) 1
  else num * factorial(num-1)
}

println(factorial(5))

def fib(num: Int): Int = {
  if(num <=2) 1
  else fib(num-1) + fib(num-2)
}

println(fib(7))

def isPrime(num: Int): Boolean = {
  def isPrimeUntil(t: Int): Boolean = {
    if(t<=1) true
    else num % t !=0 && isPrimeUntil(t-1)
  }
  
  isPrimeUntil(num/2)
}

println(isPrime(33))

// recursive functions

def concatenateNTimes(theString: String, n: Int): String = {
  def concatenateHelper(n: Int, acc: String): String = {
    if(n==1) acc
    else concatenateHelper(n-1, acc + theString)
  }
  
  concatenateHelper(n, theString)
}

println(concatenateNTimes("hi",1))

def isPrime(n: Int): Boolean = {
  def isPrimeHelper(t: Int, isStillPrime: Boolean): Boolean = {
    if(!isStillPrime) false
    else if(t <=1) true
    else isPrimeHelper(t-1, n%t != 0 && isStillPrime)
  }
  
  isPrimeHelper(n/2, true)
}

println(isPrime(15))

def fibanoci(n: Int): Int = {
  def fibanociHelper(t: Int, acc1: Int, acc2: Int): Int = {
    if(t >= n) acc1 + acc2
    else fibanociHelper(t+1, acc1+acc2, acc1)
  }
  if(n<2) 1
  else fibanociHelper(3,1,1)
}

println(fibanoci(8))

// OOPS

class Novel(name: String, yearOfRelease: Int, author: Writer) {
  def authorAge: Int = yearOfRelease - author.year
  def isWrittenBy(auth: Writer): Boolean = auth == this.author
  def copy(year: Int): Novel = new Novel(name, year, author)
}

class Writer(firstName: String, lastName: String, val year: Int) {
  def fullName: String = firstName + " " + lastName
}

val author = new Writer("charles", "dickens", 1812)
val novel = new Novel("Great Expectations", 1861, author)
val imposter = new Writer("charles", "dickens", 1812)

println(novel.authorAge)
println(novel.isWrittenBy(imposter))

class Counter(n: Int = 0){
  def count = n // just declare n as val in constructor above
  def inc: Counter = new Counter(n+1)
  def dec: Counter = new Counter(n-1)
  //def inc(value: Int): Counter = new Counter(n+value)
  //def dec(value: Int): Counter = new Counter(n-value)
  // we can also override and use recursion.
  def inc(value: Int): Counter = {
    if(value<=0) this
    else inc.inc(value-1)
  }
  def dec(value: Int): Counter = {
    if(value<=0) this
    else dec.dec(value-1)
  }
  def print = println(n)
}

val counter = new Counter
counter.inc.print
counter.inc.inc.inc.print
counter.inc(10).print

// Syntax sugar
class Person(val name: String, favMovie: String, val age: Int = 0) {
  def +(value: String): Person = new Person(s"$name ($value)", favMovie)
  def apply(): String = s"Hi, my name is $name and I like $favMovie"
  
  def unary_+ : Person = new Person(s"$name", favMovie, age + 1)
  def learns(subj: String): String = s"$name learns $subj"
  def learnScala : String = this learns "Scala" // postfix
  def apply(n: Int): String = s"$name watched $favMovie $n times"
}

val mary = new Person("Mary", "Inception")
println((mary + "the rockstar").apply()) // Infix
println((+mary).age) // Prefix
println(mary.learns("java"))
println(mary.learnScala)
println(mary(2))

// list of Int implementation
abstract class MyList {
    def head: Int
    def tail: MyList
    def isEmpty: Boolean
    def add(element: Int): MyList
    def printElements: String
    override def toString: String = "[" + printElements + "]"
  }

  object EmptyList extends MyList {
    override def head: Int = throw new NoSuchElementException
    override def tail: MyList = throw new NoSuchElementException
    override def isEmpty: Boolean = true
    override def add(element: Int): MyList = new SomeList(element, EmptyList)
    override def printElements: String = ""
  }

  class SomeList(h: Int, t: MyList) extends MyList {
    override def head: Int = h
    override def tail: MyList = t
    override def isEmpty: Boolean = false
    override def add(element: Int): MyList = new SomeList(element, this)
    override def printElements: String ={
      if(t.isEmpty) "" + h
      else h + " " + t.printElements
    }
  }

  val list = new SomeList(1, new SomeList(2, new SomeList(3, EmptyList)))
  println(list.tail.head)
  println(list.add(4).head)
  println(list.isEmpty)
  println(list.toString)
  
  //A generic list
